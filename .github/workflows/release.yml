name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.tag.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4
      - name: Get tag name
        id: tag
        run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: Create Release
        run: |
          gh release create ${{ steps.tag.outputs.tag_name }} \
            --title "Release ${{ steps.tag.outputs.tag_name }}" \
            --notes "Release ${{ steps.tag.outputs.tag_name }}" \
            --draft=false \
            --prerelease=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: somfy-cli-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            asset_name: somfy-cli-linux-x86_64-musl
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: somfy-cli-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: somfy-cli-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: somfy-cli-windows-x86_64.exe

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Install musl-tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create archive (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/somfy dist/${{ matrix.asset_name }}
          chmod +x dist/${{ matrix.asset_name }}

      - name: Create archive (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir dist
          cp target/${{ matrix.target }}/release/somfy.exe dist/${{ matrix.asset_name }}

      - name: Create tarball for Homebrew (macOS only)
        if: matrix.target == 'x86_64-apple-darwin'
        run: |
          cd dist
          tar -czf somfy-cli-${{ needs.create-release.outputs.tag_name }}.tar.gz ${{ matrix.asset_name }}

      - name: Upload Release Assets
        run: |
          gh release upload ${{ needs.create-release.outputs.tag_name }} dist/${{ matrix.asset_name }}
          if [ "${{ matrix.target }}" == "x86_64-apple-darwin" ]; then
            gh release upload ${{ needs.create-release.outputs.tag_name }} dist/somfy-cli-${{ needs.create-release.outputs.tag_name }}.tar.gz
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}